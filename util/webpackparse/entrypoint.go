package webpackparse

import (
	"context"

	"github.com/teawithsand/handmd/util/iter"
)

const DefaultEntrypointsFile = "entrypoints.json"

// Content of entrypoints.json generated by webpack.
type EntrypointsJSONDoc struct {
	Entrypoints Entrypoints `json:"entrypoints"`
	// Map of file path to it's integrity hash value
	Integrity map[string]string `json:"integrity,omitempty"`
}

// Content of entrypoints.json  generated by webpack.
// More accurately: contents of it's "entrypoints" field.
type Entrypoints map[string]Entrypoint

type Entrypoint struct {
	JS  []string `json:"js"`
	CSS []string `json:"css"`
}

// Complete data about single entrypoint entry.
type EPEntry struct {
	// Path, at which given resource should be available via HTTP.
	Src string

	// Empty, if there is no integrity value for given source
	Integrity string
}

func (doc *EntrypointsJSONDoc) ScriptsIterable(epName string) iter.Iterable[EPEntry] {
	ep, epOk := doc.Entrypoints[epName]
	if !epOk {
		// empty iterator
		return iter.IterableFunc[EPEntry](func(ctx context.Context, recv iter.Receiver[EPEntry]) (err error) {
			return
		})
	}

	integrityMap := doc.Integrity
	getInt := func(path string) string {
		if integrityMap == nil {
			return ""
		}
		return integrityMap[path]
	}

	return iter.IterableFunc[EPEntry](func(ctx context.Context, recv iter.Receiver[EPEntry]) (err error) {
		for _, js := range ep.JS {
			recv(ctx, EPEntry{
				Src:       js,
				Integrity: getInt(js),
			})
		}
		return
	})
}

func (doc *EntrypointsJSONDoc) StylesIterable(epName string) iter.Iterable[EPEntry] {
	ep, epOk := doc.Entrypoints[epName]
	if !epOk {
		// empty iterator
		return iter.IterableFunc[EPEntry](func(ctx context.Context, recv iter.Receiver[EPEntry]) (err error) {
			return
		})
	}

	integrityMap := doc.Integrity
	getInt := func(path string) string {
		if integrityMap == nil {
			return ""
		}
		return integrityMap[path]
	}

	return iter.IterableFunc[EPEntry](func(ctx context.Context, recv iter.Receiver[EPEntry]) (err error) {
		for _, css := range ep.CSS {
			recv(ctx, EPEntry{
				Src:       css,
				Integrity: getInt(css),
			})
		}
		return
	})
}
